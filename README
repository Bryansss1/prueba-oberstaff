# Prueba Tecnica oberStaff

Se ha desarrollado una aplicación backend utilizando tecnologías modernas y siguiendo principios de buenas prácticas de desarrollo con el objetivo de crear una solución escalable, mantenible y fácil de entender para cualquier desarrollador del equipo.

## Tecnologías Utilizadas

    Node.js y Express.js: Como base para el servidor web y la creación de rutas y controladores.
    MongoDB y Mongoose: Para el almacenamiento de datos y la interacción con la base de datos a través de un ORM (Object Relational Mapper).
    Zod: Para la validación de datos de entrada en los endpoints, asegurando la integridad y consistencia de los datos.
    JSON Web Tokens (JWT): Para la autenticación de usuarios y la gestión de sesiones de manera segura.
    Encriptación: Para proteger las claves sensibles almacenadas en la base de datos.
    Estructura modular: Organizando el código en módulos para mejorar la modularidad y la mantenibilidad.
    Programación funcional: Adoptado como enfoque principal para facilitar la comprensión y el mantenimiento del código.
    Seeders: Para poblar la base de datos con datos iniciales.
    Yarn: Como gestor de paquetes para administrar las dependencias del proyecto.

## Arquitectura y Estructura

    Estructura modular: El proyecto se divide en módulos bien definidos, cada uno con responsabilidades específicas.
    Capas: Se ha seguido una arquitectura en capas (controladores, servicios, modelos) para separar las responsabilidades y mejorar la testabilidad.
    Validación: Se utiliza Zod para validar todos los datos de entrada, asegurando la integridad y consistencia de los datos.
    Seguridad: Se emplean JWT para la autenticación y se encriptan las claves sensibles en la base de datos.

Proceso de Instalación y Ejecución

    Instalación de dependencias:
    Bash

yarn install

## Configuración de variables de entorno:

    Crear un archivo .env basado en env.template y configurar las siguientes variables:
        DATABASE_URL: URL de conexión a la base de datos MongoDB.
        PORT: Puerto de escucha del servidor.
        VERSION: Versión de la API.
        SECRET_KEY: Clave secreta para firmar los tokens JWT.

Ejecución en desarrollo:
Bash

yarn run dev

Ejecución en producción:
Bash

    yarn run start

## Beneficios de la Solución

    Escalabilidad: La arquitectura modular y el uso de tecnologías escalables como Node.js y MongoDB permiten un fácil escalamiento del proyecto.
    Mantenibilidad: El código bien estructurado y la utilización de buenas prácticas facilitan el mantenimiento y la adición de nuevas funcionalidades.
    Seguridad: La encriptación de claves y el uso de JWT garantizan la seguridad de los datos y de las sesiones de usuario.
    Legibilidad: El código es claro y conciso, facilitando su comprensión para cualquier desarrollador.

## Consideraciones Adicionales

    Por temas de tiempo quedaron pendientes algunas cosas como:

    CI/CD: Para poder integrarse
    Pruebas: esta pendiente implementar pruebas unitarias y de integración para garantizar la calidad del código.
    Documentación: esta pendiente la documentacion con swagger la API y el código para facilitar su uso y mantenimiento a largo plazo.

## DOCUMENTACION DE LA API

## Endpoints modulo AUTH

/api/v1/auth/sign_in

Descripción: Registra un nuevo usuario en el sistema.

Método: POST

Cuerpo de la solicitud:
JSON

{
"email": "string (requerido)",
"password": "string (requerido)",
"username": "string (requerido)",
"phone_number": "string (opcional)"
}

    email: Dirección de correo electrónico del usuario (obligatorio).
    password: Contraseña del usuario (obligatorio).
    username: Nombre de usuario elegido por el usuario (obligatorio).
    phone_number: Número de teléfono del usuario (opcional).

Respuesta:
JSON

{
"status": 201,
"body": {
"token": "string"
}
}

    status: Código de estado HTTP que indica éxito (201 Creado).
    body: Objeto que contiene la siguiente propiedad:
        token: Token de autenticación del usuario (JWT) que se utilizará en las siguientes solicitudes a la API.

/api/v1/auth/login

Descripción: Inicia sesión a un usuario existente.

Método: POST

Cuerpo de la solicitud:
JSON

{
"email": "string (requerido)",
"password": "string (requerido)"
// O
"username": "string (requerido)"
}

    Se puede iniciar sesión utilizando el correo electrónico y la contraseña, o el nombre de usuario y la contraseña.

Respuesta:
JSON

{
"status": 201,
"body": {
"token": "string"
}
}

## Endpoints modulo PROJECTS

Endpoints
/api/v1/projects/create

Descripción: Crea un nuevo proyecto.

Método: POST

Cuerpo de la solicitud:
JSON

{
"description": "Descripción detallada del proyecto",
"name": "Nombre del proyecto",
"status": "IN_PROGRESS" // Opciones: IN_PROGRESS, COMPLETED, CANCELLED
"users": ["id_usuario1", "id_usuario2", ...] // Array opcional de IDs de usuarios
}

    description: Descripción detallada del proyecto (requerido).
    name: Nombre del proyecto (requerido).
    status: Estado actual del proyecto (opcional, por defecto "IN_PROGRESS").
    users: Array de IDs de usuarios asociados al proyecto (opcional).

Respuesta:
JSON

{
"status": 201,
"body": {
"description": "Descripción del proyecto",
"name": "Nombre del proyecto",
"status": "IN_PROGRESS",
"createdAt": "2024-12-20T00:04:35.265Z", // Fecha de creación
"id": "6764b4d194f3359dc64c1698", // ID del proyecto
"users": ["id_usuario1", "id_usuario2", ...] // Array de IDs de usuarios asociados
}
}

/api/v1/projects/delete/:id

Descripción: Elimina un proyecto existente.

Método: DELETE

Parámetros de ruta:

    id: ID del proyecto a eliminar (requerido).

Respuesta:
JSON

{
"status": 200,
"body": {
"message": "Proyecto eliminado exitosamente"
}
}

/api/v1/projects/update/:id

Descripción: Actualiza un proyecto existente.

Método: PATCH

Parámetros de ruta:

    id: ID del proyecto a actualizar (requerido).

Cuerpo de la solicitud:
JSON

{
"description": "Nueva descripción del proyecto (opcional)",
"name": "Nuevo nombre del proyecto (opcional)",
"status": "Nuevo estado del proyecto (opcional)",
"users": ["Nuevo array de IDs de usuarios (opcional)"]
}

Respuesta:
JSON

{
"status": 200,
"body": {
"message": "Proyecto actualizado exitosamente"
}
}

GET /api/v1/projects/ para obtener una lista de todos los proyectos:

Respuesta:
JSON

{
"status": 200,
"body": [
{
"description": "Descripción del proyecto 1",
"name": "Nombre del proyecto 1",
"status": "IN_PROGRESS",
"createdAt": "2024-12-20T00:04:35.265Z",
"id": "6764b4d194f3359dc64c1698",
"users": ["id_usuario1", "id_usuario2"]
},
{
"description": "Descripción del proyecto 2",
"name": "Nombre del proyecto 2",
"status": "COMPLETED",
"createdAt": "2023-11-15T13:22:10.123Z",
"id": "5d4f234567890abc1234567",
"users": ["id_usuario3"]
},

]
}

## Endpoints modulo TASKS

Endpoints
/api/v1/tasks/create

Descripción: Crea una nueva tarea asociada a un proyecto.

Método: POST

Cuerpo de la solicitud:
JSON

{
"description": "Descripción de la tarea (requerido)",
"name": "Nombre de la tarea (requerido)",
"projectId": "ID del proyecto (requerido)",
"status": "PENDING" // Opciones: PENDING, IN_PROGRESS, COMPLETED, CANCELLED (opcional, por defecto: PENDING)
"userId": "ID del usuario asignado a la tarea (opcional)"
}

    description: Descripción detallada de la tarea (obligatorio).
    name: Nombre de la tarea (obligatorio).
    projectId: ID del proyecto al que pertenece la tarea (obligatorio).
    status: Estado actual de la tarea (opcional, por defecto: "PENDING").
    userId: ID del usuario asignado a la tarea (opcional).

Respuesta:
JSON

{
"status": 201,
"data": {
"description": "Descripción de la tarea",
"name": "nombre de la tarea testeto",
"status": "PENDING",
"projectId": "6764b107e60a6f3592eb5819",
"userId": "6764b104e60a6f3592eb580f",
"createdAt": "2024-12-20T00:24:01.254Z",
"\_id": "6764b9458db198b73ab36847"
}
}

    status: 201 indica que la tarea se ha creado correctamente.
    data: Objeto que contiene los detalles de la tarea creada:
        description: Descripción de la tarea.
        name: Nombre de la tarea.
        projectId: ID del proyecto al que pertenece la tarea.
        status: Estado actual de la tarea.
        userId: ID del usuario asignado a la tarea (si se proporcionó).
        createdAt: Fecha y hora de creación de la tarea.
        _id: ID único de la tarea.

PATCH /api/v1/tasks/update/:id

Descripción: Actualiza una tarea existente.

Método: PATCH

Parámetros de ruta:

    id: ID de la tarea a actualizar (requerido).

Cuerpo de la solicitud:
JSON

{
"description": "Nueva descripción de la tarea (opcional)",
"name": "Nuevo nombre de la tarea (opcional)",
"status": "Nuevo estado de la tarea (opcional)",
"userId": "Nuevo ID de usuario asignado a la tarea (opcional)"
}

Respuesta:
JSON

{
"status": 200,
"data": {
"message": "Tarea actualizada exitosamente"
}
}

    status: 200 indica que la tarea se ha actualizado correctamente.

DELETE /api/v1/tasks/delete/:id

Descripción: Elimina una tarea existente.

Método: DELETE

Parámetros de ruta:

    id: ID de la tarea a eliminar (requerido).

Respuesta:
JSON

{
"status": 200,
"data": {
"message": "Tarea eliminada exitosamente"
}
}

Endpoint:

GET /api/v1/tasks?status=PENDING&projectId=123&userId=456

Explicación de los parámetros de consulta:

    status: Filtra las tareas por su estado (PENDING, IN_PROGRESS, COMPLETED, CANCELLED).
    projectId: Filtra las tareas que pertenecen a un proyecto específico.
    userId: Filtra las tareas asignadas a un usuario específico.

Respuesta:
JSON

{
"status": 200,
"data": [
{
"id": "6764b9458db198b73ab36847",
"description": "Tarea pendiente del proyecto A",
"name": "Tarea 1",
"projectId": "123",
"status": "PENDING",
"userId": "456",
"createdAt": "2024-12-20T00:24:01.254Z"
},
// ... otras tareas que cumplan con los filtros ...
]
}
